import expect from "expect";
import { UtfVisualString } from "../../../../src/utf_visual_string";

describe("UtfVisualString", () => {
    describe("#charAt (static)", () => {
        it("works with standard ASCII characters", () => {
            const str = "abc";
            expect(UtfVisualString.charAt(str, 0)).toEqual("a");
            expect(UtfVisualString.charAt(str, 1)).toEqual("b");
            expect(UtfVisualString.charAt(str, 2)).toEqual("c");
        });

        it("works with multi-byte characters", () => {
            const str = "сЂѓсѓісЂїсЂесЂє"; // "arigatou"
            expect(UtfVisualString.charAt(str, 0)).toEqual("сЂѓ"); // "a"
            expect(UtfVisualString.charAt(str, 1)).toEqual("сѓі"); // "ri"
            expect(UtfVisualString.charAt(str, 2)).toEqual("сЂї"); // "ga"
            expect(UtfVisualString.charAt(str, 3)).toEqual("сЂе"); // "to"
            expect(UtfVisualString.charAt(str, 4)).toEqual("сЂє"); // "u"
        });

        it("works with astral plane unicode characters", () => {
            const str = "­цћБ­цћц­цћЦ­цћд";
            expect(UtfVisualString.charAt(str, 0)).toEqual("­цћБ");
            expect(UtfVisualString.charAt(str, 1)).toEqual("­цћц");
            expect(UtfVisualString.charAt(str, 2)).toEqual("­цћЦ");
            expect(UtfVisualString.charAt(str, 3)).toEqual("­цћд");
        });

        it("returns an empty string for indices that are out of range", () => {
            const str = "abc";
            expect(UtfVisualString.charAt(str, 3)).toEqual("");
        });

        it("works with regional indicators", () => {
            const str = "­ЪЄИ­ЪЄ┤­ЪЄФ­ЪЄи";
            expect(UtfVisualString.charAt(str, 0)).toEqual("­ЪЄИ­ЪЄ┤");
            expect(UtfVisualString.charAt(str, 1)).toEqual("­ЪЄФ­ЪЄи");
        });
    });
});
