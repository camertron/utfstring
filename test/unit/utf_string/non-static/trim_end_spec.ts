import expect from "expect";
import { UtfString } from "../../../../src/utf_string";

describe("UtfString", () => {
    describe("#trimEnd", () => {
        it("returns an object of type UtfString", () => {
            const utfString = new UtfString("abc ");
            expect(utfString.trimEnd()).toBeInstanceOf(UtfString);
        });

        it("returns a new object", () => {
            const utfString = new UtfString("abc ");
            expect(utfString.trimEnd() === utfString).toBeFalsy();
        });

        it("trims spaces only at the end", () => {
            const utfString = new UtfString(" abc ");
            expect(utfString.trimEnd().toString()).toEqual(" abc");
        });

        it("trims new line characters only at the end", () => {
            const utfString = new UtfString("\nabc\n");
            expect(utfString.trimEnd().toString()).toEqual("\nabc");
        });

        it("works with multi-byte characters", () => {
            const utfString = new UtfString(" сЂѓсѓісЂїсЂесЂє "); // "arigatou"
            expect(utfString.trimEnd().toString()).toEqual(" сЂѓсѓісЂїсЂесЂє");
        });

        it("works with astral plane unicode characters", () => {
            const utfString = new UtfString(" ­цћБ­цћц­цћЦ­цћд ");
            expect(utfString.trimEnd().toString()).toEqual(" ­цћБ­цћц­цћЦ­цћд");
        });

        it("works with regional indicators", () => {
            const utfString = new UtfString(" ­ЪЄИ­ЪЄ┤­ЪЄФ­ЪЄи ");
            expect(utfString.trimEnd().toString()).toEqual(" ­ЪЄИ­ЪЄ┤­ЪЄФ­ЪЄи");
        });
    });
});
